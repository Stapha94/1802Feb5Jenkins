create or replace function add_trainer(fn varchar, ln varchar)
returns void as $$
begin
	insert into teachers (first_name, last_name) values (fn, ln);
end;
$$ language plpgsql;

select add_trainer('John', 'Doe');
select * from teachers;

create or replace function delete_trainer(pk integer)
returns void as $$
begin
	delete from teachers where teacher_id = pk;
end;
$$ language plpgsql;

select delete_trainer(5)

create or replace function is_even (value integer)
returns boolean as $$
begin
	return value % 2 = 0;
end
$$ language plpgsql;

select *, is_even(teacher_id) as even from teachers;

create or replace function show_trainers() returns refcursor as $$
	declare
		ref refcursor;
	begin
		open ref for select first_name, last_name from teachers;
		return ref;
	end;
$$ language plpgsql;

select show_trainers();
fetch all in "<unnamed portal 3>"

create or replace function show_trainers2(ref refcursor)
	returns refcursor AS $$
		begin
			open ref FOR SELECT first_name, last_name from teachers;
			return ref;
		end;
$$ language plpgsql;

rollback

select show_trainers2('my_cursor');
fetch all in "my_cursor";

create or replace function add_user(new_email varchar, new_hash varchar)
returns void as $$
begin
	insert into users (email, hash) values(new_email, new_hash);
end;
$$ language plpgsql;

create or replace function check_balance(account_number integer, amount integer)
returns boolean as $$
begin
	if (select balance from accounts where number = account_number) >= amount then
		return true;
	else
		return false;
	end if;
end;
$$ language plpgsql;

Select add_user('test2@test.test', 'password');
Select * from users;

rollback;

select check_balance(22, 0) as has_no_money from accounts where number = 22;

insert into accounts (balance, type) values(0, true), (20000, false);


-- Joke Triggers/Function

create table if not exists colors (
	id serial primary key,
	color varchar(40)
);

select * from colors

insert into colors (color) values ('blue'), ('purple'), ('pink');
insert into colors (color) values ('red'), ('oragne'), ('cornflower'), ('blue');

create trigger no_blues
before insert or update on colors
for each row
execute procedure no_blues_process();

create or replace function no_blues_process()
returns trigger as $$
begin
	if(TG_OP = 'INSERT') then
		if(upper(NEW.color) = 'BLUE') THEN
			return null;
		end if;
	end if;
	if(UPPER(NEW.color) = 'BLUE') THEN
		return OLD;
	end if;
	return new;
end;
$$ language plpgsql;